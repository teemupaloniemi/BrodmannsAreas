package ba.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import ba.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.03.15 11:07:33 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class BaTest {



  // Generated by ComTest BEGIN
  /** testAdd28 */
  @Test
  public void testAdd28() {    // Ba: 28
    Ba ba = new Ba(); 
    Area a1 = new Area(), a2 = new Area(); 
    a1.register(); a2.register(); 
    assertEquals("From: Ba line: 32", 0, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 33", 1, ba.getAreaCount()); 
    ba.add(a2); assertEquals("From: Ba line: 34", 2, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 35", 3, ba.getAreaCount()); 
    assertEquals("From: Ba line: 36", a1, ba.getArea(0)); 
    assertEquals("From: Ba line: 37", a2, ba.getArea(1)); 
    assertEquals("From: Ba line: 38", a1, ba.getArea(2)); 
    try {
    assertEquals("From: Ba line: 39", a1, ba.getArea(3)); 
    fail("Ba: 39 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(a1); assertEquals("From: Ba line: 40", 4, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 41", 5, ba.getAreaCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAdd52 */
  @Test
  public void testAdd52() {    // Ba: 52
    Ba ba = new Ba(); 
    Function f1 = new Function(), f2 = new Function(); 
    f1.register(); f2.register(); 
    assertEquals("From: Ba line: 56", 0, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 57", 1, ba.getFunctionCount()); 
    ba.add(f2); assertEquals("From: Ba line: 58", 2, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 59", 3, ba.getFunctionCount()); 
    assertEquals("From: Ba line: 60", f1, ba.getFunction(0)); 
    assertEquals("From: Ba line: 61", f2, ba.getFunction(1)); 
    assertEquals("From: Ba line: 62", f1, ba.getFunction(2)); 
    try {
    assertEquals("From: Ba line: 63", f1, ba.getFunction(3)); 
    fail("Ba: 63 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(f1); assertEquals("From: Ba line: 64", 4, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 65", 5, ba.getFunctionCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAdd77 */
  @Test
  public void testAdd77() {    // Ba: 77
    try {
    Ba ba = new Ba(); 
    Location l1 = new Location().register(); 
    Location l2 = new Location().register(); 
    Function f1 = new Function().register(); 
    Function f2 = new Function().register(); 
    Function f3 = new Function().register(); 
    ba.add(l1); 
    ba.add(l2); 
    ba.add(f1); 
    ba.add(f2); 
    ba.add(f3); 
    Lf lf1 = new Lf(1,2); 
    Lf lf2 = new Lf(2,5); 
    Lf lf3 = new Lf(1,3); 
    assertEquals("From: Ba line: 93", 0, ba.getLfCount()); 
    ba.add(lf1); assertEquals("From: Ba line: 94", 1, ba.getLfCount()); 
    ba.add(lf2); assertEquals("From: Ba line: 95", 2, ba.getLfCount()); 
    ba.add(lf3); assertEquals("From: Ba line: 96", 3, ba.getLfCount()); 
    try {
    ba.add(new Lf(1,2)); 
    fail("Ba: 97 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } //jo olemasso oleva pari
    assertEquals("From: Ba line: 98", 1, ba.findLocationFor(5).getLid()); 
    } catch (TilaException e) { //
    }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAdd112 */
  @Test
  public void testAdd112() {    // Ba: 112
    Ba ba = new Ba(); 
    Location l1 = new Location(), l2 = new Location(); 
    l1.register(); l2.register(); 
    assertEquals("From: Ba line: 116", 0, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 117", 1, ba.getLocationCount()); 
    ba.add(l2); assertEquals("From: Ba line: 118", 2, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 119", 3, ba.getLocationCount()); 
    assertEquals("From: Ba line: 120", l1, ba.getLocation(0)); 
    assertEquals("From: Ba line: 121", l2, ba.getLocation(1)); 
    assertEquals("From: Ba line: 122", l1, ba.getLocation(2)); 
    try {
    assertEquals("From: Ba line: 123", l1, ba.getLocation(3)); 
    fail("Ba: 123 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(l1); assertEquals("From: Ba line: 124", 4, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 125", 5, ba.getLocationCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAdd137 */
  @Test
  public void testAdd137() {    // Ba: 137
    try {
    Ba ba = new Ba(); 
    Area a1 = new Area().register(); 
    Area a2 = new Area().register(); 
    Area a3 = new Area().register(); 
    ba.add(a1); 
    ba.add(a2); 
    ba.add(a3); 
    Neighbour n2 = new Neighbour(0,1); 
    Neighbour n3 = new Neighbour(2,1); 
    assertEquals("From: Ba line: 148", 0, ba.getNeighbourCount()); 
    ba.add(n2); assertEquals("From: Ba line: 149", 1, ba.getNeighbourCount()); 
    ba.add(n3); assertEquals("From: Ba line: 150", 2, ba.getNeighbourCount()); 
    try {
    ba.add(new Neighbour(0,0)); 
    fail("Ba: 151 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } // Ei voi olla itsens√§ naapuri
    try {
    ba.add(new Neighbour(1,2)); 
    fail("Ba: 152 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } // Jo olemasso oleva pari
    ba.add(new Neighbour(0,2)); assertEquals("From: Ba line: 153", 3, ba.getNeighbourCount()); 
    } catch (TilaException e) { //
    }
  } // Generated by ComTest END
}