package ba.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import ba.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.03.23 13:37:36 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class BaTest {



  // Generated by ComTest BEGIN
  /** 
   * testAdd30 
   * @throws TilaException when error
   */
  @Test
  public void testAdd30() throws TilaException {    // Ba: 30
    Ba ba = new Ba(); 
    Area a1 = new Area(), a2 = new Area(); 
    a1.register(); a2.register(); 
    assertEquals("From: Ba line: 35", 0, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 36", 1, ba.getAreaCount()); 
    ba.add(a2); assertEquals("From: Ba line: 37", 2, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 38", 3, ba.getAreaCount()); 
    assertEquals("From: Ba line: 39", a1, ba.getArea(0)); 
    assertEquals("From: Ba line: 40", a2, ba.getArea(1)); 
    assertEquals("From: Ba line: 41", a1, ba.getArea(2)); 
    try {
    assertEquals("From: Ba line: 42", a1, ba.getArea(3)); 
    fail("Ba: 42 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(a1); assertEquals("From: Ba line: 43", 4, ba.getAreaCount()); 
    ba.add(a1); assertEquals("From: Ba line: 44", 5, ba.getAreaCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAdd55 
   * @throws TilaException when error
   */
  @Test
  public void testAdd55() throws TilaException {    // Ba: 55
    Ba ba = new Ba(); 
    Function f1 = new Function(), f2 = new Function(); 
    f1.register(); f2.register(); 
    assertEquals("From: Ba line: 60", 0, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 61", 1, ba.getFunctionCount()); 
    ba.add(f2); assertEquals("From: Ba line: 62", 2, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 63", 3, ba.getFunctionCount()); 
    assertEquals("From: Ba line: 64", f1, ba.getFunction(0)); 
    assertEquals("From: Ba line: 65", f2, ba.getFunction(1)); 
    assertEquals("From: Ba line: 66", f1, ba.getFunction(2)); 
    try {
    assertEquals("From: Ba line: 67", f1, ba.getFunction(3)); 
    fail("Ba: 67 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(f1); assertEquals("From: Ba line: 68", 4, ba.getFunctionCount()); 
    ba.add(f1); assertEquals("From: Ba line: 69", 5, ba.getFunctionCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAdd81 
   * @throws TilaException when error
   */
  @Test
  public void testAdd81() throws TilaException {    // Ba: 81
    try {
    Ba ba = new Ba(); 
    Location l1 = new Location().register(); 
    Location l2 = new Location().register(); 
    Function f1 = new Function().register(); 
    Function f2 = new Function().register(); 
    Function f3 = new Function().register(); 
    ba.add(l1); 
    ba.add(l2); 
    ba.add(f1); 
    ba.add(f2); 
    ba.add(f3); 
    Lf lf1 = new Lf(1,2); 
    Lf lf2 = new Lf(2,5); 
    Lf lf3 = new Lf(1,3); 
    assertEquals("From: Ba line: 98", 0, ba.getLfCount()); 
    ba.add(lf1); assertEquals("From: Ba line: 99", 1, ba.getLfCount()); 
    ba.add(lf2); assertEquals("From: Ba line: 100", 2, ba.getLfCount()); 
    ba.add(lf3); assertEquals("From: Ba line: 101", 3, ba.getLfCount()); 
    try {
    ba.add(new Lf(1,2)); 
    fail("Ba: 102 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } //jo olemasso oleva pari
    assertEquals("From: Ba line: 103", 1, ba.findLocationFor(5).getID()); 
    } catch (TilaException e) { //
    }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAdd118 
   * @throws TilaException when error
   */
  @Test
  public void testAdd118() throws TilaException {    // Ba: 118
    Ba ba = new Ba(); 
    Location l1 = new Location(), l2 = new Location(); 
    l1.register(); l2.register(); 
    assertEquals("From: Ba line: 123", 0, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 124", 1, ba.getLocationCount()); 
    ba.add(l2); assertEquals("From: Ba line: 125", 2, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 126", 3, ba.getLocationCount()); 
    assertEquals("From: Ba line: 127", l1, ba.getLocation(0)); 
    assertEquals("From: Ba line: 128", l2, ba.getLocation(1)); 
    assertEquals("From: Ba line: 129", l1, ba.getLocation(2)); 
    try {
    assertEquals("From: Ba line: 130", l1, ba.getLocation(3)); 
    fail("Ba: 130 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    ba.add(l1); assertEquals("From: Ba line: 131", 4, ba.getLocationCount()); 
    ba.add(l1); assertEquals("From: Ba line: 132", 5, ba.getLocationCount()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAdd144 
   * @throws TilaException when error
   */
  @Test
  public void testAdd144() throws TilaException {    // Ba: 144
    try {
    Ba ba = new Ba(); 
    Area a1 = new Area().register(); 
    Area a2 = new Area().register(); 
    Area a3 = new Area().register(); 
    ba.add(a1); 
    ba.add(a2); 
    ba.add(a3); 
    Neighbour n2 = new Neighbour(0,1); 
    Neighbour n3 = new Neighbour(2,1); 
    assertEquals("From: Ba line: 156", 0, ba.getNeighbourCount()); 
    ba.add(n2); assertEquals("From: Ba line: 157", 1, ba.getNeighbourCount()); 
    ba.add(n3); assertEquals("From: Ba line: 158", 2, ba.getNeighbourCount()); 
    try {
    ba.add(new Neighbour(0,0)); 
    fail("Ba: 159 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } // Ei voi olla itsens√§ naapuri
    try {
    ba.add(new Neighbour(1,2)); 
    fail("Ba: 160 Did not throw TilaException");
    } catch(TilaException _e_){ _e_.getMessage(); } // Jo olemasso oleva pari
    ba.add(new Neighbour(0,2)); assertEquals("From: Ba line: 161", 3, ba.getNeighbourCount()); 
    } catch (TilaException e) { //
    }
  } // Generated by ComTest END
}